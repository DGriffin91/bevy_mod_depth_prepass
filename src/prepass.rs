//! Run a prepass before the main pass to get the depth and/or normals texture.
//! The depth prepass texture is then used by the main pass to reduce overdraw.
//!
//! To enable the prepass, you need to add a `PrepassSettings` component to a `Camera`.
//! Both textures are available on the `PrepassTextures` component attached to each `Camera` with a `PrepassSettings`
//!
//! Currently only works for 3d

use bevy::{
    prelude::*,
    render::{
        render_phase::{CachedRenderPipelinePhaseItem, DrawFunctionId, EntityPhaseItem, PhaseItem},
        render_resource::{CachedRenderPipelineId, Extent3d},
        texture::CachedTexture,
    },
    utils::FloatOrd,
};

/// Textures that are written to by the prepass. The texture only exists if the relevant option on `PrepassSettings` is true.
#[derive(Component, Clone)]
pub struct ViewPrepassTextures {
    /// The normals/depth texture generated by the prepass.
    pub normals_depth: Handle<Image>,
    /// The size of the textures
    pub size: Extent3d,
}

pub struct Opaque3dPrepass {
    pub distance: f32,
    pub entity: Entity,
    pub pipeline_id: CachedRenderPipelineId,
    pub draw_function: DrawFunctionId,
}

impl PhaseItem for Opaque3dPrepass {
    type SortKey = FloatOrd;

    #[inline]
    fn sort_key(&self) -> Self::SortKey {
        FloatOrd(self.distance)
    }

    #[inline]
    fn draw_function(&self) -> DrawFunctionId {
        self.draw_function
    }

    #[inline]
    fn sort(items: &mut [Self]) {
        radsort::sort_by_key(items, |item| item.distance);
    }
}

impl EntityPhaseItem for Opaque3dPrepass {
    fn entity(&self) -> Entity {
        self.entity
    }
}

impl CachedRenderPipelinePhaseItem for Opaque3dPrepass {
    #[inline]
    fn cached_pipeline(&self) -> CachedRenderPipelineId {
        self.pipeline_id
    }
}

pub struct AlphaMask3dPrepass {
    pub distance: f32,
    pub entity: Entity,
    pub pipeline_id: CachedRenderPipelineId,
    pub draw_function: DrawFunctionId,
}

impl PhaseItem for AlphaMask3dPrepass {
    type SortKey = FloatOrd;

    #[inline]
    fn sort_key(&self) -> Self::SortKey {
        FloatOrd(self.distance)
    }

    #[inline]
    fn draw_function(&self) -> DrawFunctionId {
        self.draw_function
    }

    #[inline]
    fn sort(items: &mut [Self]) {
        radsort::sort_by_key(items, |item| item.distance);
    }
}

impl EntityPhaseItem for AlphaMask3dPrepass {
    fn entity(&self) -> Entity {
        self.entity
    }
}

impl CachedRenderPipelinePhaseItem for AlphaMask3dPrepass {
    #[inline]
    fn cached_pipeline(&self) -> CachedRenderPipelineId {
        self.pipeline_id
    }
}
